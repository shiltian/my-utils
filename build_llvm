#!/usr/bin/env python3

import argparse
import copy
import os
import subprocess
import pathlib


projects = ["llvm", "openmp"]


def run_cmd(base_cmd: list, proj: str, build_type: str, install: bool, build_root: str):
    cmd = copy.deepcopy(base_cmd)
    if install:
        cmd.append("install")
    cwd = os.path.join(build_root, proj, build_type)
    print("[build_llvm] info: cd {}; {}".format(cwd, cmd))
    subprocess.run(cmd, cwd=cwd, check=True)


def main():
    parser = argparse.ArgumentParser(
        prog="build_llvm", description="Build LLVM and OpenMP"
    )

    parser.add_argument("-b", "--build-root", type=pathlib.Path, default=None)
    parser.add_argument(
        "-l", "--login", type=bool, default="login" in os.uname().nodename
    )
    parser.add_argument("-j", "--jobs", type=int, default=None)
    parser.add_argument("-c", "--cap", type=int, default=16)
    parser.add_argument(
        "projs", nargs="*", type=str, default=["openmp@debug,release", "llvm@release"]
    )

    args = parser.parse_args()

    print(
        "[build_llvm] info: login? {}, njobs: {}, cap: {}, projects: {}\n".format(
            args.login, args.jobs, args.cap, args.projs
        )
    )

    # Construct the list of projects to be built and their build types.
    projs = {}
    for p in args.projs:
        p = p.split("@")
        name = p[0].lower()
        assert name in projects, "invalid project {}".format(name)
        build_types = p[1].split(",")
        if name not in projs:
            projs[name] = []
        for t in build_types:
            projs[name].append(t.lower())

    # Check if the number of jobs exceed the limitation.
    njobs = args.cap if args.login else os.cpu_count()
    if args.jobs:
        njobs = args.jobs
    if njobs > args.cap and args.login:
        print(
            "[build_llvm] warning: more than {cap} cpus are used on login node. cap it to {cap}.".format(
                {"cap": args.cap}
            )
        )
        njobs = args.cap

    build_root = args.build_root if args.build_root else os.environ["BUILD_ROOT"]

    cmd = ["ninja", "-k", "0"]
    if njobs:
        cmd += ["-j", "{}".format(njobs)]

    p = "llvm"
    if p in projs:
        for t in projs[p]:
            run_cmd(cmd, p, t, False, build_root)

    p = "openmp"
    if p in projs:
        for t in projs[p]:
            run_cmd(cmd, p, t, True, build_root)


if __name__ == "__main__":
    main()

